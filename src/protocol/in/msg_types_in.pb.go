// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: msg_types_in.proto

package in

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 所有服务器内部的消息，跟客户端无关。
// 逻辑层协议号范围(300000, 399999]，如果超过这个范围，请报风险。
// [0x12345600, 0x12345605]范围请不要用，已经被服务器底层占用。
type InMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneOf:
	//	*InMessage_Kickoff
	//	*InMessage_GatewayConnClose
	//	*InMessage_RankInsert
	//	*InMessage_RankSync
	//	*InMessage_GmAddResource
	//	*InMessage_GuildSync
	//	*InMessage_GuildCreate
	//	*InMessage_GuildDismiss
	//	*InMessage_GuildApplyJoin
	//	*InMessage_GuildApplyCheck
	//	*InMessage_GuildLeave
	//	*InMessage_GuildKick
	//	*InMessage_GuildMessage
	//	*InMessage_G2RFriendRecommend
	//	*InMessage_R2GFriendRecommend
	//	*InMessage_FriendSearchReq
	//	*InMessage_FriendSearchRes
	//	*InMessage_FriendCheck
	//	*InMessage_FriendCheckRes
	//	*InMessage_RouterNodeReport
	//	*InMessage_RouterChooseRequest
	//	*InMessage_RouterChooseResponse
	//	*InMessage_SbTakeRoom
	//	*InMessage_BsTakeRoom
	OneOf isInMessage_OneOf `protobuf_oneof:"one_of"`
}

func (x *InMessage) Reset() {
	*x = InMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_types_in_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InMessage) ProtoMessage() {}

func (x *InMessage) ProtoReflect() protoreflect.Message {
	mi := &file_msg_types_in_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InMessage.ProtoReflect.Descriptor instead.
func (*InMessage) Descriptor() ([]byte, []int) {
	return file_msg_types_in_proto_rawDescGZIP(), []int{0}
}

func (m *InMessage) GetOneOf() isInMessage_OneOf {
	if m != nil {
		return m.OneOf
	}
	return nil
}

func (x *InMessage) GetKickoff() *Kickoff {
	if x, ok := x.GetOneOf().(*InMessage_Kickoff); ok {
		return x.Kickoff
	}
	return nil
}

func (x *InMessage) GetGatewayConnClose() *GatewayConnClose {
	if x, ok := x.GetOneOf().(*InMessage_GatewayConnClose); ok {
		return x.GatewayConnClose
	}
	return nil
}

func (x *InMessage) GetRankInsert() *RankInsert {
	if x, ok := x.GetOneOf().(*InMessage_RankInsert); ok {
		return x.RankInsert
	}
	return nil
}

func (x *InMessage) GetRankSync() *RankSync {
	if x, ok := x.GetOneOf().(*InMessage_RankSync); ok {
		return x.RankSync
	}
	return nil
}

func (x *InMessage) GetGmAddResource() *GmAddResource {
	if x, ok := x.GetOneOf().(*InMessage_GmAddResource); ok {
		return x.GmAddResource
	}
	return nil
}

func (x *InMessage) GetGuildSync() *GuildSync {
	if x, ok := x.GetOneOf().(*InMessage_GuildSync); ok {
		return x.GuildSync
	}
	return nil
}

func (x *InMessage) GetGuildCreate() *GuildCreate {
	if x, ok := x.GetOneOf().(*InMessage_GuildCreate); ok {
		return x.GuildCreate
	}
	return nil
}

func (x *InMessage) GetGuildDismiss() *GuildDismiss {
	if x, ok := x.GetOneOf().(*InMessage_GuildDismiss); ok {
		return x.GuildDismiss
	}
	return nil
}

func (x *InMessage) GetGuildApplyJoin() *GuildApplyJoin {
	if x, ok := x.GetOneOf().(*InMessage_GuildApplyJoin); ok {
		return x.GuildApplyJoin
	}
	return nil
}

func (x *InMessage) GetGuildApplyCheck() *GuildApplyCheck {
	if x, ok := x.GetOneOf().(*InMessage_GuildApplyCheck); ok {
		return x.GuildApplyCheck
	}
	return nil
}

func (x *InMessage) GetGuildLeave() *GuildLeave {
	if x, ok := x.GetOneOf().(*InMessage_GuildLeave); ok {
		return x.GuildLeave
	}
	return nil
}

func (x *InMessage) GetGuildKick() *GuildKick {
	if x, ok := x.GetOneOf().(*InMessage_GuildKick); ok {
		return x.GuildKick
	}
	return nil
}

func (x *InMessage) GetGuildMessage() *GuildMessage {
	if x, ok := x.GetOneOf().(*InMessage_GuildMessage); ok {
		return x.GuildMessage
	}
	return nil
}

func (x *InMessage) GetG2RFriendRecommend() *G2R_FriendRecommend {
	if x, ok := x.GetOneOf().(*InMessage_G2RFriendRecommend); ok {
		return x.G2RFriendRecommend
	}
	return nil
}

func (x *InMessage) GetR2GFriendRecommend() *R2G_FriendRecommend {
	if x, ok := x.GetOneOf().(*InMessage_R2GFriendRecommend); ok {
		return x.R2GFriendRecommend
	}
	return nil
}

func (x *InMessage) GetFriendSearchReq() *FriendSearchReq {
	if x, ok := x.GetOneOf().(*InMessage_FriendSearchReq); ok {
		return x.FriendSearchReq
	}
	return nil
}

func (x *InMessage) GetFriendSearchRes() *FriendSearchRes {
	if x, ok := x.GetOneOf().(*InMessage_FriendSearchRes); ok {
		return x.FriendSearchRes
	}
	return nil
}

func (x *InMessage) GetFriendCheck() *FriendCheck {
	if x, ok := x.GetOneOf().(*InMessage_FriendCheck); ok {
		return x.FriendCheck
	}
	return nil
}

func (x *InMessage) GetFriendCheckRes() *FriendCheckRes {
	if x, ok := x.GetOneOf().(*InMessage_FriendCheckRes); ok {
		return x.FriendCheckRes
	}
	return nil
}

func (x *InMessage) GetRouterNodeReport() *RouterNodeReport {
	if x, ok := x.GetOneOf().(*InMessage_RouterNodeReport); ok {
		return x.RouterNodeReport
	}
	return nil
}

func (x *InMessage) GetRouterChooseRequest() *RouterChooseRequest {
	if x, ok := x.GetOneOf().(*InMessage_RouterChooseRequest); ok {
		return x.RouterChooseRequest
	}
	return nil
}

func (x *InMessage) GetRouterChooseResponse() *RouterChooseResponse {
	if x, ok := x.GetOneOf().(*InMessage_RouterChooseResponse); ok {
		return x.RouterChooseResponse
	}
	return nil
}

func (x *InMessage) GetSbTakeRoom() *SB_TakeRoom {
	if x, ok := x.GetOneOf().(*InMessage_SbTakeRoom); ok {
		return x.SbTakeRoom
	}
	return nil
}

func (x *InMessage) GetBsTakeRoom() *BS_TakeRoom {
	if x, ok := x.GetOneOf().(*InMessage_BsTakeRoom); ok {
		return x.BsTakeRoom
	}
	return nil
}

type isInMessage_OneOf interface {
	isInMessage_OneOf()
}

type InMessage_Kickoff struct {
	//非业务层协议 - start
	Kickoff *Kickoff `protobuf:"bytes,1001,opt,name=kickoff,oneof"`
}

type InMessage_GatewayConnClose struct {
	GatewayConnClose *GatewayConnClose `protobuf:"bytes,1002,opt,name=gateway_conn_close,json=gatewayConnClose,oneof"` //非业务层协议 -  end
}

type InMessage_RankInsert struct {
	// 业务层协议 - start
	//排行榜
	RankInsert *RankInsert `protobuf:"bytes,300001,opt,name=rank_insert,json=rankInsert,oneof"`
}

type InMessage_RankSync struct {
	RankSync *RankSync `protobuf:"bytes,300002,opt,name=rank_sync,json=rankSync,oneof"`
}

type InMessage_GmAddResource struct {
	//gm
	GmAddResource *GmAddResource `protobuf:"bytes,300011,opt,name=gm_add_resource,json=gmAddResource,oneof"`
}

type InMessage_GuildSync struct {
	//公会
	GuildSync *GuildSync `protobuf:"bytes,300021,opt,name=guild_sync,json=guildSync,oneof"`
}

type InMessage_GuildCreate struct {
	GuildCreate *GuildCreate `protobuf:"bytes,300022,opt,name=guild_create,json=guildCreate,oneof"`
}

type InMessage_GuildDismiss struct {
	GuildDismiss *GuildDismiss `protobuf:"bytes,300023,opt,name=guild_dismiss,json=guildDismiss,oneof"`
}

type InMessage_GuildApplyJoin struct {
	GuildApplyJoin *GuildApplyJoin `protobuf:"bytes,300024,opt,name=guild_apply_join,json=guildApplyJoin,oneof"`
}

type InMessage_GuildApplyCheck struct {
	GuildApplyCheck *GuildApplyCheck `protobuf:"bytes,300025,opt,name=guild_apply_check,json=guildApplyCheck,oneof"`
}

type InMessage_GuildLeave struct {
	GuildLeave *GuildLeave `protobuf:"bytes,300026,opt,name=guild_leave,json=guildLeave,oneof"`
}

type InMessage_GuildKick struct {
	GuildKick *GuildKick `protobuf:"bytes,300027,opt,name=guild_kick,json=guildKick,oneof"`
}

type InMessage_GuildMessage struct {
	GuildMessage *GuildMessage `protobuf:"bytes,300028,opt,name=guild_message,json=guildMessage,oneof"`
}

type InMessage_G2RFriendRecommend struct {
	//好友系统
	G2RFriendRecommend *G2R_FriendRecommend `protobuf:"bytes,300031,opt,name=g2r_friend_recommend,json=g2rFriendRecommend,oneof"`
}

type InMessage_R2GFriendRecommend struct {
	R2GFriendRecommend *R2G_FriendRecommend `protobuf:"bytes,300032,opt,name=r2g_friend_recommend,json=r2gFriendRecommend,oneof"`
}

type InMessage_FriendSearchReq struct {
	FriendSearchReq *FriendSearchReq `protobuf:"bytes,300033,opt,name=friend_search_req,json=friendSearchReq,oneof"`
}

type InMessage_FriendSearchRes struct {
	FriendSearchRes *FriendSearchRes `protobuf:"bytes,300034,opt,name=friend_search_res,json=friendSearchRes,oneof"`
}

type InMessage_FriendCheck struct {
	FriendCheck *FriendCheck `protobuf:"bytes,300035,opt,name=friend_check,json=friendCheck,oneof"`
}

type InMessage_FriendCheckRes struct {
	FriendCheckRes *FriendCheckRes `protobuf:"bytes,300036,opt,name=friend_check_res,json=friendCheckRes,oneof"`
}

type InMessage_RouterNodeReport struct {
	//router相关
	RouterNodeReport *RouterNodeReport `protobuf:"bytes,300101,opt,name=router_node_report,json=routerNodeReport,oneof"`
}

type InMessage_RouterChooseRequest struct {
	RouterChooseRequest *RouterChooseRequest `protobuf:"bytes,300102,opt,name=router_choose_request,json=routerChooseRequest,oneof"`
}

type InMessage_RouterChooseResponse struct {
	RouterChooseResponse *RouterChooseResponse `protobuf:"bytes,300103,opt,name=router_choose_response,json=routerChooseResponse,oneof"`
}

type InMessage_SbTakeRoom struct {
	//380000以上协议留给战斗用
	SbTakeRoom *SB_TakeRoom `protobuf:"bytes,380001,opt,name=sb_take_room,json=sbTakeRoom,oneof"`
}

type InMessage_BsTakeRoom struct {
	BsTakeRoom *BS_TakeRoom `protobuf:"bytes,380002,opt,name=bs_take_room,json=bsTakeRoom,oneof"` // 业务层协议 - end
}

func (*InMessage_Kickoff) isInMessage_OneOf() {}

func (*InMessage_GatewayConnClose) isInMessage_OneOf() {}

func (*InMessage_RankInsert) isInMessage_OneOf() {}

func (*InMessage_RankSync) isInMessage_OneOf() {}

func (*InMessage_GmAddResource) isInMessage_OneOf() {}

func (*InMessage_GuildSync) isInMessage_OneOf() {}

func (*InMessage_GuildCreate) isInMessage_OneOf() {}

func (*InMessage_GuildDismiss) isInMessage_OneOf() {}

func (*InMessage_GuildApplyJoin) isInMessage_OneOf() {}

func (*InMessage_GuildApplyCheck) isInMessage_OneOf() {}

func (*InMessage_GuildLeave) isInMessage_OneOf() {}

func (*InMessage_GuildKick) isInMessage_OneOf() {}

func (*InMessage_GuildMessage) isInMessage_OneOf() {}

func (*InMessage_G2RFriendRecommend) isInMessage_OneOf() {}

func (*InMessage_R2GFriendRecommend) isInMessage_OneOf() {}

func (*InMessage_FriendSearchReq) isInMessage_OneOf() {}

func (*InMessage_FriendSearchRes) isInMessage_OneOf() {}

func (*InMessage_FriendCheck) isInMessage_OneOf() {}

func (*InMessage_FriendCheckRes) isInMessage_OneOf() {}

func (*InMessage_RouterNodeReport) isInMessage_OneOf() {}

func (*InMessage_RouterChooseRequest) isInMessage_OneOf() {}

func (*InMessage_RouterChooseResponse) isInMessage_OneOf() {}

func (*InMessage_SbTakeRoom) isInMessage_OneOf() {}

func (*InMessage_BsTakeRoom) isInMessage_OneOf() {}

var File_msg_types_in_proto protoreflect.FileDescriptor

var file_msg_types_in_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x1a, 0x0e, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x08, 0x67, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x69, 0x6e, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x69, 0x6e, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x69, 0x6e,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x69, 0x6e,
	0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x0d,
	0x0a, 0x09, 0x49, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6b,
	0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4b, 0x69, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x4e,
	0x0a, 0x12, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0xe1, 0xa7,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x09,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0xe2, 0xa7, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x48, 0x00, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x46, 0x0a, 0x0f, 0x67, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0xeb, 0xa7, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x6d,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x67,
	0x6d, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0xf5, 0xa7, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x48, 0x00, 0x52, 0x09, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3f, 0x0a, 0x0c, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0xf6, 0xa7, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x18, 0xf7, 0xa7, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x10,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6a, 0x6f, 0x69, 0x6e,
	0x18, 0xf8, 0xa7, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0xf9, 0xa7, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x18, 0xfa, 0xa7, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6b, 0x69, 0x63,
	0x6b, 0x18, 0xfb, 0xa7, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4b, 0x69, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x42,
	0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0xfc, 0xa7, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x67, 0x32, 0x72, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0xff, 0xa7, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x47, 0x32, 0x52, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x12, 0x67, 0x32, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x56, 0x0a, 0x14, 0x72, 0x32,
	0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x18, 0x80, 0xa8, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x32, 0x47, 0x5f, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x12,
	0x72, 0x32, 0x67, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x81, 0xa8, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52,
	0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x4c, 0x0a, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x82, 0xa8, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x12, 0x3f,
	0x0a, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x83,
	0xa8, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x49, 0x0a, 0x10, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x73, 0x18, 0x84, 0xa8, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x12, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0xc5, 0xa8, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x58, 0x0a, 0x15, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0xc6, 0xa8, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0xc7, 0xa8, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x62, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x18, 0xe1, 0x98, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x42, 0x5f, 0x54, 0x61, 0x6b, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x62, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x18, 0xe2, 0x98, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x53, 0x5f, 0x54, 0x61, 0x6b, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x42, 0x10, 0x5a, 0x0e,
	0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x69, 0x6e,
}

var (
	file_msg_types_in_proto_rawDescOnce sync.Once
	file_msg_types_in_proto_rawDescData = file_msg_types_in_proto_rawDesc
)

func file_msg_types_in_proto_rawDescGZIP() []byte {
	file_msg_types_in_proto_rawDescOnce.Do(func() {
		file_msg_types_in_proto_rawDescData = protoimpl.X.CompressGZIP(file_msg_types_in_proto_rawDescData)
	})
	return file_msg_types_in_proto_rawDescData
}

var file_msg_types_in_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_msg_types_in_proto_goTypes = []interface{}{
	(*InMessage)(nil),            // 0: am.protocol.InMessage
	(*Kickoff)(nil),              // 1: am.protocol.Kickoff
	(*GatewayConnClose)(nil),     // 2: am.protocol.GatewayConnClose
	(*RankInsert)(nil),           // 3: am.protocol.RankInsert
	(*RankSync)(nil),             // 4: am.protocol.RankSync
	(*GmAddResource)(nil),        // 5: am.protocol.GmAddResource
	(*GuildSync)(nil),            // 6: am.protocol.GuildSync
	(*GuildCreate)(nil),          // 7: am.protocol.GuildCreate
	(*GuildDismiss)(nil),         // 8: am.protocol.GuildDismiss
	(*GuildApplyJoin)(nil),       // 9: am.protocol.GuildApplyJoin
	(*GuildApplyCheck)(nil),      // 10: am.protocol.GuildApplyCheck
	(*GuildLeave)(nil),           // 11: am.protocol.GuildLeave
	(*GuildKick)(nil),            // 12: am.protocol.GuildKick
	(*GuildMessage)(nil),         // 13: am.protocol.GuildMessage
	(*G2R_FriendRecommend)(nil),  // 14: am.protocol.G2R_FriendRecommend
	(*R2G_FriendRecommend)(nil),  // 15: am.protocol.R2G_FriendRecommend
	(*FriendSearchReq)(nil),      // 16: am.protocol.FriendSearchReq
	(*FriendSearchRes)(nil),      // 17: am.protocol.FriendSearchRes
	(*FriendCheck)(nil),          // 18: am.protocol.FriendCheck
	(*FriendCheckRes)(nil),       // 19: am.protocol.FriendCheckRes
	(*RouterNodeReport)(nil),     // 20: am.protocol.RouterNodeReport
	(*RouterChooseRequest)(nil),  // 21: am.protocol.RouterChooseRequest
	(*RouterChooseResponse)(nil), // 22: am.protocol.RouterChooseResponse
	(*SB_TakeRoom)(nil),          // 23: am.protocol.SB_TakeRoom
	(*BS_TakeRoom)(nil),          // 24: am.protocol.BS_TakeRoom
}
var file_msg_types_in_proto_depIdxs = []int32{
	1,  // 0: am.protocol.InMessage.kickoff:type_name -> am.protocol.Kickoff
	2,  // 1: am.protocol.InMessage.gateway_conn_close:type_name -> am.protocol.GatewayConnClose
	3,  // 2: am.protocol.InMessage.rank_insert:type_name -> am.protocol.RankInsert
	4,  // 3: am.protocol.InMessage.rank_sync:type_name -> am.protocol.RankSync
	5,  // 4: am.protocol.InMessage.gm_add_resource:type_name -> am.protocol.GmAddResource
	6,  // 5: am.protocol.InMessage.guild_sync:type_name -> am.protocol.GuildSync
	7,  // 6: am.protocol.InMessage.guild_create:type_name -> am.protocol.GuildCreate
	8,  // 7: am.protocol.InMessage.guild_dismiss:type_name -> am.protocol.GuildDismiss
	9,  // 8: am.protocol.InMessage.guild_apply_join:type_name -> am.protocol.GuildApplyJoin
	10, // 9: am.protocol.InMessage.guild_apply_check:type_name -> am.protocol.GuildApplyCheck
	11, // 10: am.protocol.InMessage.guild_leave:type_name -> am.protocol.GuildLeave
	12, // 11: am.protocol.InMessage.guild_kick:type_name -> am.protocol.GuildKick
	13, // 12: am.protocol.InMessage.guild_message:type_name -> am.protocol.GuildMessage
	14, // 13: am.protocol.InMessage.g2r_friend_recommend:type_name -> am.protocol.G2R_FriendRecommend
	15, // 14: am.protocol.InMessage.r2g_friend_recommend:type_name -> am.protocol.R2G_FriendRecommend
	16, // 15: am.protocol.InMessage.friend_search_req:type_name -> am.protocol.FriendSearchReq
	17, // 16: am.protocol.InMessage.friend_search_res:type_name -> am.protocol.FriendSearchRes
	18, // 17: am.protocol.InMessage.friend_check:type_name -> am.protocol.FriendCheck
	19, // 18: am.protocol.InMessage.friend_check_res:type_name -> am.protocol.FriendCheckRes
	20, // 19: am.protocol.InMessage.router_node_report:type_name -> am.protocol.RouterNodeReport
	21, // 20: am.protocol.InMessage.router_choose_request:type_name -> am.protocol.RouterChooseRequest
	22, // 21: am.protocol.InMessage.router_choose_response:type_name -> am.protocol.RouterChooseResponse
	23, // 22: am.protocol.InMessage.sb_take_room:type_name -> am.protocol.SB_TakeRoom
	24, // 23: am.protocol.InMessage.bs_take_room:type_name -> am.protocol.BS_TakeRoom
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_msg_types_in_proto_init() }
func file_msg_types_in_proto_init() {
	if File_msg_types_in_proto != nil {
		return
	}
	file_in_login_proto_init()
	file_in_rank_proto_init()
	file_gm_proto_init()
	file_in_battle_proto_init()
	file_in_router_proto_init()
	file_in_guild_proto_init()
	file_in_friend_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_msg_types_in_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_msg_types_in_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*InMessage_Kickoff)(nil),
		(*InMessage_GatewayConnClose)(nil),
		(*InMessage_RankInsert)(nil),
		(*InMessage_RankSync)(nil),
		(*InMessage_GmAddResource)(nil),
		(*InMessage_GuildSync)(nil),
		(*InMessage_GuildCreate)(nil),
		(*InMessage_GuildDismiss)(nil),
		(*InMessage_GuildApplyJoin)(nil),
		(*InMessage_GuildApplyCheck)(nil),
		(*InMessage_GuildLeave)(nil),
		(*InMessage_GuildKick)(nil),
		(*InMessage_GuildMessage)(nil),
		(*InMessage_G2RFriendRecommend)(nil),
		(*InMessage_R2GFriendRecommend)(nil),
		(*InMessage_FriendSearchReq)(nil),
		(*InMessage_FriendSearchRes)(nil),
		(*InMessage_FriendCheck)(nil),
		(*InMessage_FriendCheckRes)(nil),
		(*InMessage_RouterNodeReport)(nil),
		(*InMessage_RouterChooseRequest)(nil),
		(*InMessage_RouterChooseResponse)(nil),
		(*InMessage_SbTakeRoom)(nil),
		(*InMessage_BsTakeRoom)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msg_types_in_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msg_types_in_proto_goTypes,
		DependencyIndexes: file_msg_types_in_proto_depIdxs,
		MessageInfos:      file_msg_types_in_proto_msgTypes,
	}.Build()
	File_msg_types_in_proto = out.File
	file_msg_types_in_proto_rawDesc = nil
	file_msg_types_in_proto_goTypes = nil
	file_msg_types_in_proto_depIdxs = nil
}
