// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: msg_types_sc.proto

package out

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 所有服务器->客户端的消息类型
// (100+模块号)*1000 + 递增号
// 比如下面登陆，登陆模块号为1
// 协议号范围 (100000, 299999]，如果超出这个范围，请报风险
// 注意：在客户端，1**开头的是C#端协议，2**开头的是Lua端协议。
type SCMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneOf:
	//	*SCMessage_ScLogin
	//	*SCMessage_ScCreate
	//	*SCMessage_ScKickoff
	//	*SCMessage_ScGm
	//	*SCMessage_ScReady
	//	*SCMessage_ScHeroDraw
	//	*SCMessage_ScHeroLevelUp
	//	*SCMessage_ScHeroStarUp
	//	*SCMessage_ScHeroList
	//	*SCMessage_ScBagList
	//	*SCMessage_ScExpandBag
	//	*SCMessage_ScUseSinglepickbox
	//	*SCMessage_ScSaleItem
	//	*SCMessage_ScResourceNotify
	//	*SCMessage_ScResourceList
	//	*SCMessage_ScErrResponse
	//	*SCMessage_ScStatisticsList
	//	*SCMessage_ScLimitList
	//	*SCMessage_ScDrawReward
	//	*SCMessage_ScRankList
	//	*SCMessage_ScMailList
	//	*SCMessage_ScMailNotify
	//	*SCMessage_ScGetShop
	//	*SCMessage_ScTowerInfo
	//	*SCMessage_ScTowerFight
	//	*SCMessage_ScGetGuildlist
	//	*SCMessage_ScGetFriendlist
	//	*SCMessage_ScFriendRecommend
	//	*SCMessage_ScFriendSearch
	//	*SCMessage_ScBattleHeartBeat
	//	*SCMessage_ScEnterStage
	//	*SCMessage_ScBattleLogin
	//	*SCMessage_ScBattleReady
	//	*SCMessage_ScBattleGm
	//	*SCMessage_ScMove
	//	*SCMessage_ScAddUnit
	//	*SCMessage_ScRemoveUnit
	//	*SCMessage_ScSyncUnitInfo
	//	*SCMessage_ScQuickTakeRoom
	//	*SCMessage_ScCollectionResource
	//	*SCMessage_ScStateChange
	//	*SCMessage_ScAwardsGet
	//	*SCMessage_ScMainUnit
	//	*SCMessage_ScUnitAddItem
	//	*SCMessage_ScUnitSyncItem
	//	*SCMessage_ScCastSkill
	//	*SCMessage_ScSyncDamage
	//	*SCMessage_ScSyncGunInfo
	//	*SCMessage_ScShiftGun
	//	*SCMessage_ScStageRestart
	//	*SCMessage_ScStagePhaseTiming
	//	*SCMessage_ScStageMonsterComingTiming
	//	*SCMessage_ScAddBuff
	//	*SCMessage_ScDelBuff
	//	*SCMessage_ScAddMagicfield
	//	*SCMessage_ScDelMagicfield
	//	*SCMessage_ScUnitInterruptSkill
	//	*SCMessage_ScTips
	//	*SCMessage_ScSyncAllItems
	//	*SCMessage_ScGetExp
	//	*SCMessage_ScGetAbility
	//	*SCMessage_ScTaskList
	//	*SCMessage_ScSyncTasks
	//	*SCMessage_ScMonsterWaveComing
	//	*SCMessage_ScEnterScene
	//	*SCMessage_ScMonsterWakeup
	//	*SCMessage_ScCastBullet
	OneOf isSCMessage_OneOf `protobuf_oneof:"one_of"`
}

func (x *SCMessage) Reset() {
	*x = SCMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_types_sc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCMessage) ProtoMessage() {}

func (x *SCMessage) ProtoReflect() protoreflect.Message {
	mi := &file_msg_types_sc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCMessage.ProtoReflect.Descriptor instead.
func (*SCMessage) Descriptor() ([]byte, []int) {
	return file_msg_types_sc_proto_rawDescGZIP(), []int{0}
}

func (m *SCMessage) GetOneOf() isSCMessage_OneOf {
	if m != nil {
		return m.OneOf
	}
	return nil
}

func (x *SCMessage) GetScLogin() *SC_Login {
	if x, ok := x.GetOneOf().(*SCMessage_ScLogin); ok {
		return x.ScLogin
	}
	return nil
}

func (x *SCMessage) GetScCreate() *SC_Create {
	if x, ok := x.GetOneOf().(*SCMessage_ScCreate); ok {
		return x.ScCreate
	}
	return nil
}

func (x *SCMessage) GetScKickoff() *SC_Kickoff {
	if x, ok := x.GetOneOf().(*SCMessage_ScKickoff); ok {
		return x.ScKickoff
	}
	return nil
}

func (x *SCMessage) GetScGm() *SC_Gm {
	if x, ok := x.GetOneOf().(*SCMessage_ScGm); ok {
		return x.ScGm
	}
	return nil
}

func (x *SCMessage) GetScReady() *SC_Ready {
	if x, ok := x.GetOneOf().(*SCMessage_ScReady); ok {
		return x.ScReady
	}
	return nil
}

func (x *SCMessage) GetScHeroDraw() *SC_HeroDraw {
	if x, ok := x.GetOneOf().(*SCMessage_ScHeroDraw); ok {
		return x.ScHeroDraw
	}
	return nil
}

func (x *SCMessage) GetScHeroLevelUp() *SC_HeroLevelUp {
	if x, ok := x.GetOneOf().(*SCMessage_ScHeroLevelUp); ok {
		return x.ScHeroLevelUp
	}
	return nil
}

func (x *SCMessage) GetScHeroStarUp() *SC_HeroStarUp {
	if x, ok := x.GetOneOf().(*SCMessage_ScHeroStarUp); ok {
		return x.ScHeroStarUp
	}
	return nil
}

func (x *SCMessage) GetScHeroList() *SC_HeroList {
	if x, ok := x.GetOneOf().(*SCMessage_ScHeroList); ok {
		return x.ScHeroList
	}
	return nil
}

func (x *SCMessage) GetScBagList() *SC_BagList {
	if x, ok := x.GetOneOf().(*SCMessage_ScBagList); ok {
		return x.ScBagList
	}
	return nil
}

func (x *SCMessage) GetScExpandBag() *SC_ExpandBag {
	if x, ok := x.GetOneOf().(*SCMessage_ScExpandBag); ok {
		return x.ScExpandBag
	}
	return nil
}

func (x *SCMessage) GetScUseSinglepickbox() *SC_UseSinglePickBox {
	if x, ok := x.GetOneOf().(*SCMessage_ScUseSinglepickbox); ok {
		return x.ScUseSinglepickbox
	}
	return nil
}

func (x *SCMessage) GetScSaleItem() *SC_SaleItem {
	if x, ok := x.GetOneOf().(*SCMessage_ScSaleItem); ok {
		return x.ScSaleItem
	}
	return nil
}

func (x *SCMessage) GetScResourceNotify() *SC_ResourceNotify {
	if x, ok := x.GetOneOf().(*SCMessage_ScResourceNotify); ok {
		return x.ScResourceNotify
	}
	return nil
}

func (x *SCMessage) GetScResourceList() *SC_ResourceList {
	if x, ok := x.GetOneOf().(*SCMessage_ScResourceList); ok {
		return x.ScResourceList
	}
	return nil
}

func (x *SCMessage) GetScErrResponse() *SC_ErrResponse {
	if x, ok := x.GetOneOf().(*SCMessage_ScErrResponse); ok {
		return x.ScErrResponse
	}
	return nil
}

func (x *SCMessage) GetScStatisticsList() *SC_StatisticsList {
	if x, ok := x.GetOneOf().(*SCMessage_ScStatisticsList); ok {
		return x.ScStatisticsList
	}
	return nil
}

func (x *SCMessage) GetScLimitList() *SC_LimitList {
	if x, ok := x.GetOneOf().(*SCMessage_ScLimitList); ok {
		return x.ScLimitList
	}
	return nil
}

func (x *SCMessage) GetScDrawReward() *SC_DrawReward {
	if x, ok := x.GetOneOf().(*SCMessage_ScDrawReward); ok {
		return x.ScDrawReward
	}
	return nil
}

func (x *SCMessage) GetScRankList() *SC_GetRankList {
	if x, ok := x.GetOneOf().(*SCMessage_ScRankList); ok {
		return x.ScRankList
	}
	return nil
}

func (x *SCMessage) GetScMailList() *SC_GetMailList {
	if x, ok := x.GetOneOf().(*SCMessage_ScMailList); ok {
		return x.ScMailList
	}
	return nil
}

func (x *SCMessage) GetScMailNotify() *SC_MailNotify {
	if x, ok := x.GetOneOf().(*SCMessage_ScMailNotify); ok {
		return x.ScMailNotify
	}
	return nil
}

func (x *SCMessage) GetScGetShop() *SC_GetShop {
	if x, ok := x.GetOneOf().(*SCMessage_ScGetShop); ok {
		return x.ScGetShop
	}
	return nil
}

func (x *SCMessage) GetScTowerInfo() *SC_GetTowerInfo {
	if x, ok := x.GetOneOf().(*SCMessage_ScTowerInfo); ok {
		return x.ScTowerInfo
	}
	return nil
}

func (x *SCMessage) GetScTowerFight() *SC_TowerFight {
	if x, ok := x.GetOneOf().(*SCMessage_ScTowerFight); ok {
		return x.ScTowerFight
	}
	return nil
}

func (x *SCMessage) GetScGetGuildlist() *SC_GetGuildList {
	if x, ok := x.GetOneOf().(*SCMessage_ScGetGuildlist); ok {
		return x.ScGetGuildlist
	}
	return nil
}

func (x *SCMessage) GetScGetFriendlist() *SC_GetFriendList {
	if x, ok := x.GetOneOf().(*SCMessage_ScGetFriendlist); ok {
		return x.ScGetFriendlist
	}
	return nil
}

func (x *SCMessage) GetScFriendRecommend() *SC_FriendRecommend {
	if x, ok := x.GetOneOf().(*SCMessage_ScFriendRecommend); ok {
		return x.ScFriendRecommend
	}
	return nil
}

func (x *SCMessage) GetScFriendSearch() *SC_FriendSearch {
	if x, ok := x.GetOneOf().(*SCMessage_ScFriendSearch); ok {
		return x.ScFriendSearch
	}
	return nil
}

func (x *SCMessage) GetScBattleHeartBeat() *SC_BattleHeartBeat {
	if x, ok := x.GetOneOf().(*SCMessage_ScBattleHeartBeat); ok {
		return x.ScBattleHeartBeat
	}
	return nil
}

func (x *SCMessage) GetScEnterStage() *SC_EnterStage {
	if x, ok := x.GetOneOf().(*SCMessage_ScEnterStage); ok {
		return x.ScEnterStage
	}
	return nil
}

func (x *SCMessage) GetScBattleLogin() *SC_BattleLogin {
	if x, ok := x.GetOneOf().(*SCMessage_ScBattleLogin); ok {
		return x.ScBattleLogin
	}
	return nil
}

func (x *SCMessage) GetScBattleReady() *SC_BattleReady {
	if x, ok := x.GetOneOf().(*SCMessage_ScBattleReady); ok {
		return x.ScBattleReady
	}
	return nil
}

func (x *SCMessage) GetScBattleGm() *SC_BattleGm {
	if x, ok := x.GetOneOf().(*SCMessage_ScBattleGm); ok {
		return x.ScBattleGm
	}
	return nil
}

func (x *SCMessage) GetScMove() *SC_Move {
	if x, ok := x.GetOneOf().(*SCMessage_ScMove); ok {
		return x.ScMove
	}
	return nil
}

func (x *SCMessage) GetScAddUnit() *SC_AddUnit {
	if x, ok := x.GetOneOf().(*SCMessage_ScAddUnit); ok {
		return x.ScAddUnit
	}
	return nil
}

func (x *SCMessage) GetScRemoveUnit() *SC_RemoveUnit {
	if x, ok := x.GetOneOf().(*SCMessage_ScRemoveUnit); ok {
		return x.ScRemoveUnit
	}
	return nil
}

func (x *SCMessage) GetScSyncUnitInfo() *SC_SyncUnitInfo {
	if x, ok := x.GetOneOf().(*SCMessage_ScSyncUnitInfo); ok {
		return x.ScSyncUnitInfo
	}
	return nil
}

func (x *SCMessage) GetScQuickTakeRoom() *SC_QuickTakeRoom {
	if x, ok := x.GetOneOf().(*SCMessage_ScQuickTakeRoom); ok {
		return x.ScQuickTakeRoom
	}
	return nil
}

func (x *SCMessage) GetScCollectionResource() *SC_CollectionResource {
	if x, ok := x.GetOneOf().(*SCMessage_ScCollectionResource); ok {
		return x.ScCollectionResource
	}
	return nil
}

func (x *SCMessage) GetScStateChange() *SC_StateChange {
	if x, ok := x.GetOneOf().(*SCMessage_ScStateChange); ok {
		return x.ScStateChange
	}
	return nil
}

func (x *SCMessage) GetScAwardsGet() *SC_AwardsGet {
	if x, ok := x.GetOneOf().(*SCMessage_ScAwardsGet); ok {
		return x.ScAwardsGet
	}
	return nil
}

func (x *SCMessage) GetScMainUnit() *SC_MainUnit {
	if x, ok := x.GetOneOf().(*SCMessage_ScMainUnit); ok {
		return x.ScMainUnit
	}
	return nil
}

func (x *SCMessage) GetScUnitAddItem() *SC_UnitAddItem {
	if x, ok := x.GetOneOf().(*SCMessage_ScUnitAddItem); ok {
		return x.ScUnitAddItem
	}
	return nil
}

func (x *SCMessage) GetScUnitSyncItem() *SC_UnitSyncItem {
	if x, ok := x.GetOneOf().(*SCMessage_ScUnitSyncItem); ok {
		return x.ScUnitSyncItem
	}
	return nil
}

func (x *SCMessage) GetScCastSkill() *SC_CastSkill {
	if x, ok := x.GetOneOf().(*SCMessage_ScCastSkill); ok {
		return x.ScCastSkill
	}
	return nil
}

func (x *SCMessage) GetScSyncDamage() *SC_SyncDamage {
	if x, ok := x.GetOneOf().(*SCMessage_ScSyncDamage); ok {
		return x.ScSyncDamage
	}
	return nil
}

func (x *SCMessage) GetScSyncGunInfo() *SC_SyncGunInfo {
	if x, ok := x.GetOneOf().(*SCMessage_ScSyncGunInfo); ok {
		return x.ScSyncGunInfo
	}
	return nil
}

func (x *SCMessage) GetScShiftGun() *SC_ShiftGun {
	if x, ok := x.GetOneOf().(*SCMessage_ScShiftGun); ok {
		return x.ScShiftGun
	}
	return nil
}

func (x *SCMessage) GetScStageRestart() *SC_StageRestart {
	if x, ok := x.GetOneOf().(*SCMessage_ScStageRestart); ok {
		return x.ScStageRestart
	}
	return nil
}

func (x *SCMessage) GetScStagePhaseTiming() *SC_StagePhaseTiming {
	if x, ok := x.GetOneOf().(*SCMessage_ScStagePhaseTiming); ok {
		return x.ScStagePhaseTiming
	}
	return nil
}

func (x *SCMessage) GetScStageMonsterComingTiming() *SC_StageMonsterComingTiming {
	if x, ok := x.GetOneOf().(*SCMessage_ScStageMonsterComingTiming); ok {
		return x.ScStageMonsterComingTiming
	}
	return nil
}

func (x *SCMessage) GetScAddBuff() *SC_AddBuff {
	if x, ok := x.GetOneOf().(*SCMessage_ScAddBuff); ok {
		return x.ScAddBuff
	}
	return nil
}

func (x *SCMessage) GetScDelBuff() *SC_DelBuff {
	if x, ok := x.GetOneOf().(*SCMessage_ScDelBuff); ok {
		return x.ScDelBuff
	}
	return nil
}

func (x *SCMessage) GetScAddMagicfield() *SC_AddMagicField {
	if x, ok := x.GetOneOf().(*SCMessage_ScAddMagicfield); ok {
		return x.ScAddMagicfield
	}
	return nil
}

func (x *SCMessage) GetScDelMagicfield() *SC_DelMagicField {
	if x, ok := x.GetOneOf().(*SCMessage_ScDelMagicfield); ok {
		return x.ScDelMagicfield
	}
	return nil
}

func (x *SCMessage) GetScUnitInterruptSkill() *SC_UnitInterruptSkill {
	if x, ok := x.GetOneOf().(*SCMessage_ScUnitInterruptSkill); ok {
		return x.ScUnitInterruptSkill
	}
	return nil
}

func (x *SCMessage) GetScTips() *SC_Tips {
	if x, ok := x.GetOneOf().(*SCMessage_ScTips); ok {
		return x.ScTips
	}
	return nil
}

func (x *SCMessage) GetScSyncAllItems() *SC_SyncAllItems {
	if x, ok := x.GetOneOf().(*SCMessage_ScSyncAllItems); ok {
		return x.ScSyncAllItems
	}
	return nil
}

func (x *SCMessage) GetScGetExp() *SC_GetExp {
	if x, ok := x.GetOneOf().(*SCMessage_ScGetExp); ok {
		return x.ScGetExp
	}
	return nil
}

func (x *SCMessage) GetScGetAbility() *SC_GetAbility {
	if x, ok := x.GetOneOf().(*SCMessage_ScGetAbility); ok {
		return x.ScGetAbility
	}
	return nil
}

func (x *SCMessage) GetScTaskList() *SC_TaskList {
	if x, ok := x.GetOneOf().(*SCMessage_ScTaskList); ok {
		return x.ScTaskList
	}
	return nil
}

func (x *SCMessage) GetScSyncTasks() *SC_SyncTask {
	if x, ok := x.GetOneOf().(*SCMessage_ScSyncTasks); ok {
		return x.ScSyncTasks
	}
	return nil
}

func (x *SCMessage) GetScMonsterWaveComing() *SC_MonsterWaveComing {
	if x, ok := x.GetOneOf().(*SCMessage_ScMonsterWaveComing); ok {
		return x.ScMonsterWaveComing
	}
	return nil
}

func (x *SCMessage) GetScEnterScene() *SC_EnterScene {
	if x, ok := x.GetOneOf().(*SCMessage_ScEnterScene); ok {
		return x.ScEnterScene
	}
	return nil
}

func (x *SCMessage) GetScMonsterWakeup() *SC_MonsterWakeUp {
	if x, ok := x.GetOneOf().(*SCMessage_ScMonsterWakeup); ok {
		return x.ScMonsterWakeup
	}
	return nil
}

func (x *SCMessage) GetScCastBullet() *SC_CastBullet {
	if x, ok := x.GetOneOf().(*SCMessage_ScCastBullet); ok {
		return x.ScCastBullet
	}
	return nil
}

type isSCMessage_OneOf interface {
	isSCMessage_OneOf()
}

type SCMessage_ScLogin struct {
	//登陆相关 101
	ScLogin *SC_Login `protobuf:"bytes,101001,opt,name=sc_login,json=scLogin,oneof"`
}

type SCMessage_ScCreate struct {
	ScCreate *SC_Create `protobuf:"bytes,101002,opt,name=sc_create,json=scCreate,oneof"`
}

type SCMessage_ScKickoff struct {
	ScKickoff *SC_Kickoff `protobuf:"bytes,101003,opt,name=sc_kickoff,json=scKickoff,oneof"`
}

type SCMessage_ScGm struct {
	ScGm *SC_Gm `protobuf:"bytes,101004,opt,name=sc_gm,json=scGm,oneof"`
}

type SCMessage_ScReady struct {
	ScReady *SC_Ready `protobuf:"bytes,101005,opt,name=sc_ready,json=scReady,oneof"`
}

type SCMessage_ScHeroDraw struct {
	//角色系统 102
	ScHeroDraw *SC_HeroDraw `protobuf:"bytes,102001,opt,name=sc_hero_draw,json=scHeroDraw,oneof"`
}

type SCMessage_ScHeroLevelUp struct {
	ScHeroLevelUp *SC_HeroLevelUp `protobuf:"bytes,102002,opt,name=sc_hero_level_up,json=scHeroLevelUp,oneof"`
}

type SCMessage_ScHeroStarUp struct {
	ScHeroStarUp *SC_HeroStarUp `protobuf:"bytes,102003,opt,name=sc_hero_star_up,json=scHeroStarUp,oneof"`
}

type SCMessage_ScHeroList struct {
	ScHeroList *SC_HeroList `protobuf:"bytes,102004,opt,name=sc_hero_list,json=scHeroList,oneof"`
}

type SCMessage_ScBagList struct {
	//背包道具相关 103
	ScBagList *SC_BagList `protobuf:"bytes,103001,opt,name=sc_bag_list,json=scBagList,oneof"`
}

type SCMessage_ScExpandBag struct {
	ScExpandBag *SC_ExpandBag `protobuf:"bytes,103002,opt,name=sc_expand_bag,json=scExpandBag,oneof"`
}

type SCMessage_ScUseSinglepickbox struct {
	ScUseSinglepickbox *SC_UseSinglePickBox `protobuf:"bytes,103003,opt,name=sc_use_singlepickbox,json=scUseSinglepickbox,oneof"`
}

type SCMessage_ScSaleItem struct {
	ScSaleItem *SC_SaleItem `protobuf:"bytes,1030004,opt,name=sc_sale_item,json=scSaleItem,oneof"`
}

type SCMessage_ScResourceNotify struct {
	ScResourceNotify *SC_ResourceNotify `protobuf:"bytes,103005,opt,name=sc_resource_notify,json=scResourceNotify,oneof"`
}

type SCMessage_ScResourceList struct {
	ScResourceList *SC_ResourceList `protobuf:"bytes,103006,opt,name=sc_resource_list,json=scResourceList,oneof"`
}

type SCMessage_ScErrResponse struct {
	//错误返回
	ScErrResponse *SC_ErrResponse `protobuf:"bytes,103020,opt,name=sc_err_response,json=scErrResponse,oneof"`
}

type SCMessage_ScStatisticsList struct {
	// 玩家次数、限次记录
	ScStatisticsList *SC_StatisticsList `protobuf:"bytes,103030,opt,name=sc_statistics_list,json=scStatisticsList,oneof"`
}

type SCMessage_ScLimitList struct {
	ScLimitList *SC_LimitList `protobuf:"bytes,103031,opt,name=sc_limit_list,json=scLimitList,oneof"`
}

type SCMessage_ScDrawReward struct {
	//抽卡相关 104
	ScDrawReward *SC_DrawReward `protobuf:"bytes,104002,opt,name=sc_draw_reward,json=scDrawReward,oneof"`
}

type SCMessage_ScRankList struct {
	//排行榜 105
	ScRankList *SC_GetRankList `protobuf:"bytes,105001,opt,name=sc_rank_list,json=scRankList,oneof"`
}

type SCMessage_ScMailList struct {
	//邮件系统 106
	ScMailList *SC_GetMailList `protobuf:"bytes,106001,opt,name=sc_mail_list,json=scMailList,oneof"`
}

type SCMessage_ScMailNotify struct {
	//SC_ReadMail sc_read_mail = 106002;
	//SC_ReceiveMail sc_receive_mail = 106003;
	//SC_DeleteMail sc_delete_mail = 106004;
	ScMailNotify *SC_MailNotify `protobuf:"bytes,106002,opt,name=sc_mail_notify,json=scMailNotify,oneof"`
}

type SCMessage_ScGetShop struct {
	//商店系统 107
	ScGetShop *SC_GetShop `protobuf:"bytes,107001,opt,name=sc_get_shop,json=scGetShop,oneof"`
}

type SCMessage_ScTowerInfo struct {
	//爬塔系统 108
	ScTowerInfo *SC_GetTowerInfo `protobuf:"bytes,108001,opt,name=sc_tower_info,json=scTowerInfo,oneof"`
}

type SCMessage_ScTowerFight struct {
	ScTowerFight *SC_TowerFight `protobuf:"bytes,108002,opt,name=sc_tower_fight,json=scTowerFight,oneof"`
}

type SCMessage_ScGetGuildlist struct {
	//公会系统 109
	ScGetGuildlist *SC_GetGuildList `protobuf:"bytes,109008,opt,name=sc_get_guildlist,json=scGetGuildlist,oneof"`
}

type SCMessage_ScGetFriendlist struct {
	//好友系统 110
	ScGetFriendlist *SC_GetFriendList `protobuf:"bytes,110001,opt,name=sc_get_friendlist,json=scGetFriendlist,oneof"`
}

type SCMessage_ScFriendRecommend struct {
	ScFriendRecommend *SC_FriendRecommend `protobuf:"bytes,110002,opt,name=sc_friend_recommend,json=scFriendRecommend,oneof"`
}

type SCMessage_ScFriendSearch struct {
	ScFriendSearch *SC_FriendSearch `protobuf:"bytes,110003,opt,name=sc_friend_search,json=scFriendSearch,oneof"`
}

type SCMessage_ScBattleHeartBeat struct {
	//战斗系统
	ScBattleHeartBeat *SC_BattleHeartBeat `protobuf:"bytes,150000,opt,name=sc_battle_heart_beat,json=scBattleHeartBeat,oneof"`
}

type SCMessage_ScEnterStage struct {
	ScEnterStage *SC_EnterStage `protobuf:"bytes,150001,opt,name=sc_enter_stage,json=scEnterStage,oneof"`
}

type SCMessage_ScBattleLogin struct {
	ScBattleLogin *SC_BattleLogin `protobuf:"bytes,150002,opt,name=sc_battle_login,json=scBattleLogin,oneof"`
}

type SCMessage_ScBattleReady struct {
	ScBattleReady *SC_BattleReady `protobuf:"bytes,150003,opt,name=sc_battle_ready,json=scBattleReady,oneof"`
}

type SCMessage_ScBattleGm struct {
	ScBattleGm *SC_BattleGm `protobuf:"bytes,150004,opt,name=sc_battle_gm,json=scBattleGm,oneof"`
}

type SCMessage_ScMove struct {
	ScMove *SC_Move `protobuf:"bytes,150005,opt,name=sc_move,json=scMove,oneof"`
}

type SCMessage_ScAddUnit struct {
	ScAddUnit *SC_AddUnit `protobuf:"bytes,150006,opt,name=sc_add_unit,json=scAddUnit,oneof"`
}

type SCMessage_ScRemoveUnit struct {
	ScRemoveUnit *SC_RemoveUnit `protobuf:"bytes,150007,opt,name=sc_remove_unit,json=scRemoveUnit,oneof"`
}

type SCMessage_ScSyncUnitInfo struct {
	ScSyncUnitInfo *SC_SyncUnitInfo `protobuf:"bytes,150008,opt,name=sc_sync_unit_info,json=scSyncUnitInfo,oneof"`
}

type SCMessage_ScQuickTakeRoom struct {
	ScQuickTakeRoom *SC_QuickTakeRoom `protobuf:"bytes,150009,opt,name=sc_quick_take_room,json=scQuickTakeRoom,oneof"`
}

type SCMessage_ScCollectionResource struct {
	ScCollectionResource *SC_CollectionResource `protobuf:"bytes,150010,opt,name=sc_collection_resource,json=scCollectionResource,oneof"`
}

type SCMessage_ScStateChange struct {
	ScStateChange *SC_StateChange `protobuf:"bytes,150011,opt,name=sc_state_change,json=scStateChange,oneof"`
}

type SCMessage_ScAwardsGet struct {
	ScAwardsGet *SC_AwardsGet `protobuf:"bytes,150012,opt,name=sc_awards_get,json=scAwardsGet,oneof"`
}

type SCMessage_ScMainUnit struct {
	ScMainUnit *SC_MainUnit `protobuf:"bytes,150013,opt,name=sc_main_unit,json=scMainUnit,oneof"`
}

type SCMessage_ScUnitAddItem struct {
	ScUnitAddItem *SC_UnitAddItem `protobuf:"bytes,150014,opt,name=sc_unit_add_item,json=scUnitAddItem,oneof"`
}

type SCMessage_ScUnitSyncItem struct {
	ScUnitSyncItem *SC_UnitSyncItem `protobuf:"bytes,150015,opt,name=sc_unit_sync_item,json=scUnitSyncItem,oneof"`
}

type SCMessage_ScCastSkill struct {
	ScCastSkill *SC_CastSkill `protobuf:"bytes,150016,opt,name=sc_cast_skill,json=scCastSkill,oneof"`
}

type SCMessage_ScSyncDamage struct {
	ScSyncDamage *SC_SyncDamage `protobuf:"bytes,150017,opt,name=sc_sync_damage,json=scSyncDamage,oneof"`
}

type SCMessage_ScSyncGunInfo struct {
	ScSyncGunInfo *SC_SyncGunInfo `protobuf:"bytes,150019,opt,name=sc_sync_gun_info,json=scSyncGunInfo,oneof"`
}

type SCMessage_ScShiftGun struct {
	ScShiftGun *SC_ShiftGun `protobuf:"bytes,150020,opt,name=sc_shift_gun,json=scShiftGun,oneof"`
}

type SCMessage_ScStageRestart struct {
	ScStageRestart *SC_StageRestart `protobuf:"bytes,150022,opt,name=sc_stage_restart,json=scStageRestart,oneof"`
}

type SCMessage_ScStagePhaseTiming struct {
	ScStagePhaseTiming *SC_StagePhaseTiming `protobuf:"bytes,150023,opt,name=sc_stage_phase_timing,json=scStagePhaseTiming,oneof"`
}

type SCMessage_ScStageMonsterComingTiming struct {
	ScStageMonsterComingTiming *SC_StageMonsterComingTiming `protobuf:"bytes,150024,opt,name=sc_stage_monster_coming_timing,json=scStageMonsterComingTiming,oneof"`
}

type SCMessage_ScAddBuff struct {
	ScAddBuff *SC_AddBuff `protobuf:"bytes,150025,opt,name=sc_add_buff,json=scAddBuff,oneof"`
}

type SCMessage_ScDelBuff struct {
	ScDelBuff *SC_DelBuff `protobuf:"bytes,150026,opt,name=sc_del_buff,json=scDelBuff,oneof"`
}

type SCMessage_ScAddMagicfield struct {
	ScAddMagicfield *SC_AddMagicField `protobuf:"bytes,150027,opt,name=sc_add_magicfield,json=scAddMagicfield,oneof"`
}

type SCMessage_ScDelMagicfield struct {
	ScDelMagicfield *SC_DelMagicField `protobuf:"bytes,150028,opt,name=sc_del_magicfield,json=scDelMagicfield,oneof"`
}

type SCMessage_ScUnitInterruptSkill struct {
	ScUnitInterruptSkill *SC_UnitInterruptSkill `protobuf:"bytes,150029,opt,name=sc_unit_interrupt_skill,json=scUnitInterruptSkill,oneof"`
}

type SCMessage_ScTips struct {
	ScTips *SC_Tips `protobuf:"bytes,150030,opt,name=sc_tips,json=scTips,oneof"`
}

type SCMessage_ScSyncAllItems struct {
	ScSyncAllItems *SC_SyncAllItems `protobuf:"bytes,150031,opt,name=sc_sync_all_items,json=scSyncAllItems,oneof"`
}

type SCMessage_ScGetExp struct {
	ScGetExp *SC_GetExp `protobuf:"bytes,150033,opt,name=sc_get_exp,json=scGetExp,oneof"`
}

type SCMessage_ScGetAbility struct {
	ScGetAbility *SC_GetAbility `protobuf:"bytes,150034,opt,name=sc_get_ability,json=scGetAbility,oneof"`
}

type SCMessage_ScTaskList struct {
	ScTaskList *SC_TaskList `protobuf:"bytes,150036,opt,name=sc_task_list,json=scTaskList,oneof"`
}

type SCMessage_ScSyncTasks struct {
	ScSyncTasks *SC_SyncTask `protobuf:"bytes,150037,opt,name=sc_sync_tasks,json=scSyncTasks,oneof"`
}

type SCMessage_ScMonsterWaveComing struct {
	ScMonsterWaveComing *SC_MonsterWaveComing `protobuf:"bytes,150039,opt,name=sc_monster_wave_coming,json=scMonsterWaveComing,oneof"`
}

type SCMessage_ScEnterScene struct {
	ScEnterScene *SC_EnterScene `protobuf:"bytes,150040,opt,name=sc_enter_scene,json=scEnterScene,oneof"`
}

type SCMessage_ScMonsterWakeup struct {
	ScMonsterWakeup *SC_MonsterWakeUp `protobuf:"bytes,150042,opt,name=sc_monster_wakeup,json=scMonsterWakeup,oneof"`
}

type SCMessage_ScCastBullet struct {
	ScCastBullet *SC_CastBullet `protobuf:"bytes,150043,opt,name=sc_cast_bullet,json=scCastBullet,oneof"`
}

func (*SCMessage_ScLogin) isSCMessage_OneOf() {}

func (*SCMessage_ScCreate) isSCMessage_OneOf() {}

func (*SCMessage_ScKickoff) isSCMessage_OneOf() {}

func (*SCMessage_ScGm) isSCMessage_OneOf() {}

func (*SCMessage_ScReady) isSCMessage_OneOf() {}

func (*SCMessage_ScHeroDraw) isSCMessage_OneOf() {}

func (*SCMessage_ScHeroLevelUp) isSCMessage_OneOf() {}

func (*SCMessage_ScHeroStarUp) isSCMessage_OneOf() {}

func (*SCMessage_ScHeroList) isSCMessage_OneOf() {}

func (*SCMessage_ScBagList) isSCMessage_OneOf() {}

func (*SCMessage_ScExpandBag) isSCMessage_OneOf() {}

func (*SCMessage_ScUseSinglepickbox) isSCMessage_OneOf() {}

func (*SCMessage_ScSaleItem) isSCMessage_OneOf() {}

func (*SCMessage_ScResourceNotify) isSCMessage_OneOf() {}

func (*SCMessage_ScResourceList) isSCMessage_OneOf() {}

func (*SCMessage_ScErrResponse) isSCMessage_OneOf() {}

func (*SCMessage_ScStatisticsList) isSCMessage_OneOf() {}

func (*SCMessage_ScLimitList) isSCMessage_OneOf() {}

func (*SCMessage_ScDrawReward) isSCMessage_OneOf() {}

func (*SCMessage_ScRankList) isSCMessage_OneOf() {}

func (*SCMessage_ScMailList) isSCMessage_OneOf() {}

func (*SCMessage_ScMailNotify) isSCMessage_OneOf() {}

func (*SCMessage_ScGetShop) isSCMessage_OneOf() {}

func (*SCMessage_ScTowerInfo) isSCMessage_OneOf() {}

func (*SCMessage_ScTowerFight) isSCMessage_OneOf() {}

func (*SCMessage_ScGetGuildlist) isSCMessage_OneOf() {}

func (*SCMessage_ScGetFriendlist) isSCMessage_OneOf() {}

func (*SCMessage_ScFriendRecommend) isSCMessage_OneOf() {}

func (*SCMessage_ScFriendSearch) isSCMessage_OneOf() {}

func (*SCMessage_ScBattleHeartBeat) isSCMessage_OneOf() {}

func (*SCMessage_ScEnterStage) isSCMessage_OneOf() {}

func (*SCMessage_ScBattleLogin) isSCMessage_OneOf() {}

func (*SCMessage_ScBattleReady) isSCMessage_OneOf() {}

func (*SCMessage_ScBattleGm) isSCMessage_OneOf() {}

func (*SCMessage_ScMove) isSCMessage_OneOf() {}

func (*SCMessage_ScAddUnit) isSCMessage_OneOf() {}

func (*SCMessage_ScRemoveUnit) isSCMessage_OneOf() {}

func (*SCMessage_ScSyncUnitInfo) isSCMessage_OneOf() {}

func (*SCMessage_ScQuickTakeRoom) isSCMessage_OneOf() {}

func (*SCMessage_ScCollectionResource) isSCMessage_OneOf() {}

func (*SCMessage_ScStateChange) isSCMessage_OneOf() {}

func (*SCMessage_ScAwardsGet) isSCMessage_OneOf() {}

func (*SCMessage_ScMainUnit) isSCMessage_OneOf() {}

func (*SCMessage_ScUnitAddItem) isSCMessage_OneOf() {}

func (*SCMessage_ScUnitSyncItem) isSCMessage_OneOf() {}

func (*SCMessage_ScCastSkill) isSCMessage_OneOf() {}

func (*SCMessage_ScSyncDamage) isSCMessage_OneOf() {}

func (*SCMessage_ScSyncGunInfo) isSCMessage_OneOf() {}

func (*SCMessage_ScShiftGun) isSCMessage_OneOf() {}

func (*SCMessage_ScStageRestart) isSCMessage_OneOf() {}

func (*SCMessage_ScStagePhaseTiming) isSCMessage_OneOf() {}

func (*SCMessage_ScStageMonsterComingTiming) isSCMessage_OneOf() {}

func (*SCMessage_ScAddBuff) isSCMessage_OneOf() {}

func (*SCMessage_ScDelBuff) isSCMessage_OneOf() {}

func (*SCMessage_ScAddMagicfield) isSCMessage_OneOf() {}

func (*SCMessage_ScDelMagicfield) isSCMessage_OneOf() {}

func (*SCMessage_ScUnitInterruptSkill) isSCMessage_OneOf() {}

func (*SCMessage_ScTips) isSCMessage_OneOf() {}

func (*SCMessage_ScSyncAllItems) isSCMessage_OneOf() {}

func (*SCMessage_ScGetExp) isSCMessage_OneOf() {}

func (*SCMessage_ScGetAbility) isSCMessage_OneOf() {}

func (*SCMessage_ScTaskList) isSCMessage_OneOf() {}

func (*SCMessage_ScSyncTasks) isSCMessage_OneOf() {}

func (*SCMessage_ScMonsterWaveComing) isSCMessage_OneOf() {}

func (*SCMessage_ScEnterScene) isSCMessage_OneOf() {}

func (*SCMessage_ScMonsterWakeup) isSCMessage_OneOf() {}

func (*SCMessage_ScCastBullet) isSCMessage_OneOf() {}

var File_msg_types_sc_proto protoreflect.FileDescriptor

var file_msg_types_sc_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x1a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x68, 0x65, 0x72, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x62, 0x61, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x72, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x64, 0x72, 0x61, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x73, 0x68, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb,
	0x25, 0x0a, 0x09, 0x53, 0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x08,
	0x73, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x89, 0x95, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x43, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x73, 0x63, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x63, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18,
	0x8a, 0x95, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x73,
	0x63, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x8b, 0x95, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x43, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63,
	0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x63, 0x5f, 0x67, 0x6d,
	0x18, 0x8c, 0x95, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x47, 0x6d, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x63, 0x47, 0x6d, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x18, 0x8d, 0x95, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x48,
	0x00, 0x52, 0x07, 0x73, 0x63, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x63,
	0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0xf1, 0x9c, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x43, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x63, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x72, 0x61, 0x77, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x63,
	0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x75, 0x70, 0x18, 0xf2,
	0x9c, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x55, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x55, 0x70, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x63, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x70, 0x18, 0xf3, 0x9c, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43,
	0x5f, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x55, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x63, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x55, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x73,
	0x63, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xf4, 0x9c, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x63, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73,
	0x63, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xd9, 0xa4, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x43, 0x5f, 0x42, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x63, 0x42, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x63, 0x5f, 0x65,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x67, 0x18, 0xda, 0xa4, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x43, 0x5f, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x67, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x63, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x67, 0x12, 0x56, 0x0a, 0x14, 0x73,
	0x63, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x70, 0x69, 0x63, 0x6b,
	0x62, 0x6f, 0x78, 0x18, 0xdb, 0xa4, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x55, 0x73, 0x65,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x42, 0x6f, 0x78, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x63, 0x55, 0x73, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x70, 0x69, 0x63, 0x6b,
	0x62, 0x6f, 0x78, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x63, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0xf4, 0xee, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x53, 0x61, 0x6c,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x53, 0x61, 0x6c, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x50, 0x0a, 0x12, 0x73, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0xdd, 0xa4, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x43, 0x5f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x48, 0x00, 0x52, 0x10, 0x73, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xde, 0xa4, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x43, 0x5f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x73, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0xec, 0xa4, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x45, 0x72,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63, 0x45,
	0x72, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x73, 0x63,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0xf6, 0xa4, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d,
	0x73, 0x63, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xf7, 0xa4,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x0e, 0x73, 0x63, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0xc2, 0xac, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x44, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x44, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xa9, 0xb4, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63,
	0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x63, 0x5f, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x91, 0xbc, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x43, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x63, 0x4d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x73,
	0x63, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x92, 0xbc,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x4d, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x4d, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x63, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x70,
	0x18, 0xf9, 0xc3, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f,
	0x70, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x44,
	0x0a, 0x0d, 0x73, 0x63, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xe1, 0xcb, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x63, 0x54, 0x6f, 0x77, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x63, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x18, 0xe2, 0xcb, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x63,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xd0,
	0xd3, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x63, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xb1, 0xdb, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x63, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x13, 0x73, 0x63, 0x5f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0xb2, 0xdb, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x11, 0x73, 0x63, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x63,
	0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0xb3,
	0xdb, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x54, 0x0a, 0x14, 0x73, 0x63, 0x5f, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x65, 0x61, 0x74, 0x18, 0xf0,
	0x93, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x11, 0x73, 0x63, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x44, 0x0a, 0x0e,
	0x73, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0xf1,
	0x93, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x63, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0xf2, 0x93, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x73,
	0x63, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0xf3,
	0x93, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x63, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x67, 0x6d, 0x18, 0xf4, 0x93, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x47, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x47, 0x6d, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x63, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0xf5, 0x93, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x63, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0xf6, 0x93, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f,
	0x41, 0x64, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x41, 0x64, 0x64,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x63, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0xf7, 0x93, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x73, 0x63,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xf8, 0x93, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x12, 0x73, 0x63, 0x5f, 0x71, 0x75,
	0x69, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0xf9, 0x93,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x54, 0x61, 0x6b, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x63, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x54,
	0x61, 0x6b, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x5c, 0x0a, 0x16, 0x73, 0x63, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0xfa, 0x93, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x14, 0x73, 0x63, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0xfb, 0x93, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x43, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x41,
	0x0a, 0x0d, 0x73, 0x63, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x18,
	0xfc, 0x93, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x47,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x63, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x47, 0x65,
	0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x63, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0xfd, 0x93, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x4d, 0x61, 0x69, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x4d, 0x61, 0x69, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0xfe, 0x93, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x55,
	0x6e, 0x69, 0x74, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63,
	0x55, 0x6e, 0x69, 0x74, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4b, 0x0a, 0x11, 0x73,
	0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0xff, 0x93, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x63, 0x5f, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x80, 0x94, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x43, 0x5f, 0x43, 0x61, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x63, 0x43, 0x61, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x0e, 0x73,
	0x63, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x81, 0x94,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x63, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x67, 0x75, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x83, 0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x53,
	0x79, 0x6e, 0x63, 0x47, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63,
	0x53, 0x79, 0x6e, 0x63, 0x47, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0c, 0x73,
	0x63, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x67, 0x75, 0x6e, 0x18, 0x84, 0x94, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x53, 0x68, 0x69, 0x66, 0x74, 0x47, 0x75, 0x6e, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x63, 0x53, 0x68, 0x69, 0x66, 0x74, 0x47, 0x75, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x73,
	0x63, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x86, 0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x57, 0x0a, 0x15, 0x73, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x87, 0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x12, 0x73, 0x63,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x70, 0x0a, 0x1e, 0x73, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x18, 0x88, 0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x63, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x18, 0x89, 0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x41, 0x64, 0x64, 0x42, 0x75,
	0x66, 0x66, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x41, 0x64, 0x64, 0x42, 0x75, 0x66, 0x66, 0x12,
	0x3b, 0x0a, 0x0b, 0x73, 0x63, 0x5f, 0x64, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x8a,
	0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x44, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x63, 0x44, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x12, 0x4d, 0x0a, 0x11,
	0x73, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x8b, 0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x41, 0x64, 0x64, 0x4d, 0x61,
	0x67, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x63, 0x41, 0x64,
	0x64, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4d, 0x0a, 0x11, 0x73,
	0x63, 0x5f, 0x64, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x8c, 0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x44, 0x65, 0x6c, 0x4d, 0x61, 0x67,
	0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x63, 0x44, 0x65, 0x6c,
	0x4d, 0x61, 0x67, 0x69, 0x63, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x5d, 0x0a, 0x17, 0x73, 0x63,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x8d, 0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x14, 0x73, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x63, 0x5f,
	0x74, 0x69, 0x70, 0x73, 0x18, 0x8e, 0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x54, 0x69,
	0x70, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x54, 0x69, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x11,
	0x73, 0x63, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x8f, 0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x53, 0x79, 0x6e, 0x63, 0x41,
	0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x53, 0x79, 0x6e,
	0x63, 0x41, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x63, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x91, 0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43,
	0x5f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x08, 0x73, 0x63, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x70, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x63, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x92, 0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x47,
	0x65, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x47,
	0x65, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x63, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x94, 0x94, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x43, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x63, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x95, 0x94, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x43, 0x5f, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x5a, 0x0a, 0x16, 0x73,
	0x63, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x97, 0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x57, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x13, 0x73, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x57, 0x61, 0x76,
	0x65, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x63, 0x5f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x98, 0x94, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x43, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x4d, 0x0a,
	0x11, 0x73, 0x63, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6b, 0x65,
	0x75, 0x70, 0x18, 0x9a, 0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x57, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x63, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x57, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x12, 0x44, 0x0a, 0x0e,
	0x73, 0x63, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x9b,
	0x94, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x43, 0x5f, 0x43, 0x61, 0x73, 0x74, 0x42, 0x75, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x43, 0x61, 0x73, 0x74, 0x42, 0x75, 0x6c, 0x6c,
	0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x42, 0x11, 0x5a, 0x0f,
	0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6f, 0x75, 0x74,
}

var (
	file_msg_types_sc_proto_rawDescOnce sync.Once
	file_msg_types_sc_proto_rawDescData = file_msg_types_sc_proto_rawDesc
)

func file_msg_types_sc_proto_rawDescGZIP() []byte {
	file_msg_types_sc_proto_rawDescOnce.Do(func() {
		file_msg_types_sc_proto_rawDescData = protoimpl.X.CompressGZIP(file_msg_types_sc_proto_rawDescData)
	})
	return file_msg_types_sc_proto_rawDescData
}

var file_msg_types_sc_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_msg_types_sc_proto_goTypes = []interface{}{
	(*SCMessage)(nil),                   // 0: am.protocol.SCMessage
	(*SC_Login)(nil),                    // 1: am.protocol.SC_Login
	(*SC_Create)(nil),                   // 2: am.protocol.SC_Create
	(*SC_Kickoff)(nil),                  // 3: am.protocol.SC_Kickoff
	(*SC_Gm)(nil),                       // 4: am.protocol.SC_Gm
	(*SC_Ready)(nil),                    // 5: am.protocol.SC_Ready
	(*SC_HeroDraw)(nil),                 // 6: am.protocol.SC_HeroDraw
	(*SC_HeroLevelUp)(nil),              // 7: am.protocol.SC_HeroLevelUp
	(*SC_HeroStarUp)(nil),               // 8: am.protocol.SC_HeroStarUp
	(*SC_HeroList)(nil),                 // 9: am.protocol.SC_HeroList
	(*SC_BagList)(nil),                  // 10: am.protocol.SC_BagList
	(*SC_ExpandBag)(nil),                // 11: am.protocol.SC_ExpandBag
	(*SC_UseSinglePickBox)(nil),         // 12: am.protocol.SC_UseSinglePickBox
	(*SC_SaleItem)(nil),                 // 13: am.protocol.SC_SaleItem
	(*SC_ResourceNotify)(nil),           // 14: am.protocol.SC_ResourceNotify
	(*SC_ResourceList)(nil),             // 15: am.protocol.SC_ResourceList
	(*SC_ErrResponse)(nil),              // 16: am.protocol.SC_ErrResponse
	(*SC_StatisticsList)(nil),           // 17: am.protocol.SC_StatisticsList
	(*SC_LimitList)(nil),                // 18: am.protocol.SC_LimitList
	(*SC_DrawReward)(nil),               // 19: am.protocol.SC_DrawReward
	(*SC_GetRankList)(nil),              // 20: am.protocol.SC_GetRankList
	(*SC_GetMailList)(nil),              // 21: am.protocol.SC_GetMailList
	(*SC_MailNotify)(nil),               // 22: am.protocol.SC_MailNotify
	(*SC_GetShop)(nil),                  // 23: am.protocol.SC_GetShop
	(*SC_GetTowerInfo)(nil),             // 24: am.protocol.SC_GetTowerInfo
	(*SC_TowerFight)(nil),               // 25: am.protocol.SC_TowerFight
	(*SC_GetGuildList)(nil),             // 26: am.protocol.SC_GetGuildList
	(*SC_GetFriendList)(nil),            // 27: am.protocol.SC_GetFriendList
	(*SC_FriendRecommend)(nil),          // 28: am.protocol.SC_FriendRecommend
	(*SC_FriendSearch)(nil),             // 29: am.protocol.SC_FriendSearch
	(*SC_BattleHeartBeat)(nil),          // 30: am.protocol.SC_BattleHeartBeat
	(*SC_EnterStage)(nil),               // 31: am.protocol.SC_EnterStage
	(*SC_BattleLogin)(nil),              // 32: am.protocol.SC_BattleLogin
	(*SC_BattleReady)(nil),              // 33: am.protocol.SC_BattleReady
	(*SC_BattleGm)(nil),                 // 34: am.protocol.SC_BattleGm
	(*SC_Move)(nil),                     // 35: am.protocol.SC_Move
	(*SC_AddUnit)(nil),                  // 36: am.protocol.SC_AddUnit
	(*SC_RemoveUnit)(nil),               // 37: am.protocol.SC_RemoveUnit
	(*SC_SyncUnitInfo)(nil),             // 38: am.protocol.SC_SyncUnitInfo
	(*SC_QuickTakeRoom)(nil),            // 39: am.protocol.SC_QuickTakeRoom
	(*SC_CollectionResource)(nil),       // 40: am.protocol.SC_CollectionResource
	(*SC_StateChange)(nil),              // 41: am.protocol.SC_StateChange
	(*SC_AwardsGet)(nil),                // 42: am.protocol.SC_AwardsGet
	(*SC_MainUnit)(nil),                 // 43: am.protocol.SC_MainUnit
	(*SC_UnitAddItem)(nil),              // 44: am.protocol.SC_UnitAddItem
	(*SC_UnitSyncItem)(nil),             // 45: am.protocol.SC_UnitSyncItem
	(*SC_CastSkill)(nil),                // 46: am.protocol.SC_CastSkill
	(*SC_SyncDamage)(nil),               // 47: am.protocol.SC_SyncDamage
	(*SC_SyncGunInfo)(nil),              // 48: am.protocol.SC_SyncGunInfo
	(*SC_ShiftGun)(nil),                 // 49: am.protocol.SC_ShiftGun
	(*SC_StageRestart)(nil),             // 50: am.protocol.SC_StageRestart
	(*SC_StagePhaseTiming)(nil),         // 51: am.protocol.SC_StagePhaseTiming
	(*SC_StageMonsterComingTiming)(nil), // 52: am.protocol.SC_StageMonsterComingTiming
	(*SC_AddBuff)(nil),                  // 53: am.protocol.SC_AddBuff
	(*SC_DelBuff)(nil),                  // 54: am.protocol.SC_DelBuff
	(*SC_AddMagicField)(nil),            // 55: am.protocol.SC_AddMagicField
	(*SC_DelMagicField)(nil),            // 56: am.protocol.SC_DelMagicField
	(*SC_UnitInterruptSkill)(nil),       // 57: am.protocol.SC_UnitInterruptSkill
	(*SC_Tips)(nil),                     // 58: am.protocol.SC_Tips
	(*SC_SyncAllItems)(nil),             // 59: am.protocol.SC_SyncAllItems
	(*SC_GetExp)(nil),                   // 60: am.protocol.SC_GetExp
	(*SC_GetAbility)(nil),               // 61: am.protocol.SC_GetAbility
	(*SC_TaskList)(nil),                 // 62: am.protocol.SC_TaskList
	(*SC_SyncTask)(nil),                 // 63: am.protocol.SC_SyncTask
	(*SC_MonsterWaveComing)(nil),        // 64: am.protocol.SC_MonsterWaveComing
	(*SC_EnterScene)(nil),               // 65: am.protocol.SC_EnterScene
	(*SC_MonsterWakeUp)(nil),            // 66: am.protocol.SC_MonsterWakeUp
	(*SC_CastBullet)(nil),               // 67: am.protocol.SC_CastBullet
}
var file_msg_types_sc_proto_depIdxs = []int32{
	1,  // 0: am.protocol.SCMessage.sc_login:type_name -> am.protocol.SC_Login
	2,  // 1: am.protocol.SCMessage.sc_create:type_name -> am.protocol.SC_Create
	3,  // 2: am.protocol.SCMessage.sc_kickoff:type_name -> am.protocol.SC_Kickoff
	4,  // 3: am.protocol.SCMessage.sc_gm:type_name -> am.protocol.SC_Gm
	5,  // 4: am.protocol.SCMessage.sc_ready:type_name -> am.protocol.SC_Ready
	6,  // 5: am.protocol.SCMessage.sc_hero_draw:type_name -> am.protocol.SC_HeroDraw
	7,  // 6: am.protocol.SCMessage.sc_hero_level_up:type_name -> am.protocol.SC_HeroLevelUp
	8,  // 7: am.protocol.SCMessage.sc_hero_star_up:type_name -> am.protocol.SC_HeroStarUp
	9,  // 8: am.protocol.SCMessage.sc_hero_list:type_name -> am.protocol.SC_HeroList
	10, // 9: am.protocol.SCMessage.sc_bag_list:type_name -> am.protocol.SC_BagList
	11, // 10: am.protocol.SCMessage.sc_expand_bag:type_name -> am.protocol.SC_ExpandBag
	12, // 11: am.protocol.SCMessage.sc_use_singlepickbox:type_name -> am.protocol.SC_UseSinglePickBox
	13, // 12: am.protocol.SCMessage.sc_sale_item:type_name -> am.protocol.SC_SaleItem
	14, // 13: am.protocol.SCMessage.sc_resource_notify:type_name -> am.protocol.SC_ResourceNotify
	15, // 14: am.protocol.SCMessage.sc_resource_list:type_name -> am.protocol.SC_ResourceList
	16, // 15: am.protocol.SCMessage.sc_err_response:type_name -> am.protocol.SC_ErrResponse
	17, // 16: am.protocol.SCMessage.sc_statistics_list:type_name -> am.protocol.SC_StatisticsList
	18, // 17: am.protocol.SCMessage.sc_limit_list:type_name -> am.protocol.SC_LimitList
	19, // 18: am.protocol.SCMessage.sc_draw_reward:type_name -> am.protocol.SC_DrawReward
	20, // 19: am.protocol.SCMessage.sc_rank_list:type_name -> am.protocol.SC_GetRankList
	21, // 20: am.protocol.SCMessage.sc_mail_list:type_name -> am.protocol.SC_GetMailList
	22, // 21: am.protocol.SCMessage.sc_mail_notify:type_name -> am.protocol.SC_MailNotify
	23, // 22: am.protocol.SCMessage.sc_get_shop:type_name -> am.protocol.SC_GetShop
	24, // 23: am.protocol.SCMessage.sc_tower_info:type_name -> am.protocol.SC_GetTowerInfo
	25, // 24: am.protocol.SCMessage.sc_tower_fight:type_name -> am.protocol.SC_TowerFight
	26, // 25: am.protocol.SCMessage.sc_get_guildlist:type_name -> am.protocol.SC_GetGuildList
	27, // 26: am.protocol.SCMessage.sc_get_friendlist:type_name -> am.protocol.SC_GetFriendList
	28, // 27: am.protocol.SCMessage.sc_friend_recommend:type_name -> am.protocol.SC_FriendRecommend
	29, // 28: am.protocol.SCMessage.sc_friend_search:type_name -> am.protocol.SC_FriendSearch
	30, // 29: am.protocol.SCMessage.sc_battle_heart_beat:type_name -> am.protocol.SC_BattleHeartBeat
	31, // 30: am.protocol.SCMessage.sc_enter_stage:type_name -> am.protocol.SC_EnterStage
	32, // 31: am.protocol.SCMessage.sc_battle_login:type_name -> am.protocol.SC_BattleLogin
	33, // 32: am.protocol.SCMessage.sc_battle_ready:type_name -> am.protocol.SC_BattleReady
	34, // 33: am.protocol.SCMessage.sc_battle_gm:type_name -> am.protocol.SC_BattleGm
	35, // 34: am.protocol.SCMessage.sc_move:type_name -> am.protocol.SC_Move
	36, // 35: am.protocol.SCMessage.sc_add_unit:type_name -> am.protocol.SC_AddUnit
	37, // 36: am.protocol.SCMessage.sc_remove_unit:type_name -> am.protocol.SC_RemoveUnit
	38, // 37: am.protocol.SCMessage.sc_sync_unit_info:type_name -> am.protocol.SC_SyncUnitInfo
	39, // 38: am.protocol.SCMessage.sc_quick_take_room:type_name -> am.protocol.SC_QuickTakeRoom
	40, // 39: am.protocol.SCMessage.sc_collection_resource:type_name -> am.protocol.SC_CollectionResource
	41, // 40: am.protocol.SCMessage.sc_state_change:type_name -> am.protocol.SC_StateChange
	42, // 41: am.protocol.SCMessage.sc_awards_get:type_name -> am.protocol.SC_AwardsGet
	43, // 42: am.protocol.SCMessage.sc_main_unit:type_name -> am.protocol.SC_MainUnit
	44, // 43: am.protocol.SCMessage.sc_unit_add_item:type_name -> am.protocol.SC_UnitAddItem
	45, // 44: am.protocol.SCMessage.sc_unit_sync_item:type_name -> am.protocol.SC_UnitSyncItem
	46, // 45: am.protocol.SCMessage.sc_cast_skill:type_name -> am.protocol.SC_CastSkill
	47, // 46: am.protocol.SCMessage.sc_sync_damage:type_name -> am.protocol.SC_SyncDamage
	48, // 47: am.protocol.SCMessage.sc_sync_gun_info:type_name -> am.protocol.SC_SyncGunInfo
	49, // 48: am.protocol.SCMessage.sc_shift_gun:type_name -> am.protocol.SC_ShiftGun
	50, // 49: am.protocol.SCMessage.sc_stage_restart:type_name -> am.protocol.SC_StageRestart
	51, // 50: am.protocol.SCMessage.sc_stage_phase_timing:type_name -> am.protocol.SC_StagePhaseTiming
	52, // 51: am.protocol.SCMessage.sc_stage_monster_coming_timing:type_name -> am.protocol.SC_StageMonsterComingTiming
	53, // 52: am.protocol.SCMessage.sc_add_buff:type_name -> am.protocol.SC_AddBuff
	54, // 53: am.protocol.SCMessage.sc_del_buff:type_name -> am.protocol.SC_DelBuff
	55, // 54: am.protocol.SCMessage.sc_add_magicfield:type_name -> am.protocol.SC_AddMagicField
	56, // 55: am.protocol.SCMessage.sc_del_magicfield:type_name -> am.protocol.SC_DelMagicField
	57, // 56: am.protocol.SCMessage.sc_unit_interrupt_skill:type_name -> am.protocol.SC_UnitInterruptSkill
	58, // 57: am.protocol.SCMessage.sc_tips:type_name -> am.protocol.SC_Tips
	59, // 58: am.protocol.SCMessage.sc_sync_all_items:type_name -> am.protocol.SC_SyncAllItems
	60, // 59: am.protocol.SCMessage.sc_get_exp:type_name -> am.protocol.SC_GetExp
	61, // 60: am.protocol.SCMessage.sc_get_ability:type_name -> am.protocol.SC_GetAbility
	62, // 61: am.protocol.SCMessage.sc_task_list:type_name -> am.protocol.SC_TaskList
	63, // 62: am.protocol.SCMessage.sc_sync_tasks:type_name -> am.protocol.SC_SyncTask
	64, // 63: am.protocol.SCMessage.sc_monster_wave_coming:type_name -> am.protocol.SC_MonsterWaveComing
	65, // 64: am.protocol.SCMessage.sc_enter_scene:type_name -> am.protocol.SC_EnterScene
	66, // 65: am.protocol.SCMessage.sc_monster_wakeup:type_name -> am.protocol.SC_MonsterWakeUp
	67, // 66: am.protocol.SCMessage.sc_cast_bullet:type_name -> am.protocol.SC_CastBullet
	67, // [67:67] is the sub-list for method output_type
	67, // [67:67] is the sub-list for method input_type
	67, // [67:67] is the sub-list for extension type_name
	67, // [67:67] is the sub-list for extension extendee
	0,  // [0:67] is the sub-list for field type_name
}

func init() { file_msg_types_sc_proto_init() }
func file_msg_types_sc_proto_init() {
	if File_msg_types_sc_proto != nil {
		return
	}
	file_login_proto_init()
	file_hero_proto_init()
	file_bag_proto_init()
	file_err_response_proto_init()
	file_draw_proto_init()
	file_statistics_proto_init()
	file_rank_proto_init()
	file_mail_proto_init()
	file_shop_proto_init()
	file_limit_proto_init()
	file_tower_proto_init()
	file_battle_proto_init()
	file_guild_proto_init()
	file_friend_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_msg_types_sc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_msg_types_sc_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SCMessage_ScLogin)(nil),
		(*SCMessage_ScCreate)(nil),
		(*SCMessage_ScKickoff)(nil),
		(*SCMessage_ScGm)(nil),
		(*SCMessage_ScReady)(nil),
		(*SCMessage_ScHeroDraw)(nil),
		(*SCMessage_ScHeroLevelUp)(nil),
		(*SCMessage_ScHeroStarUp)(nil),
		(*SCMessage_ScHeroList)(nil),
		(*SCMessage_ScBagList)(nil),
		(*SCMessage_ScExpandBag)(nil),
		(*SCMessage_ScUseSinglepickbox)(nil),
		(*SCMessage_ScSaleItem)(nil),
		(*SCMessage_ScResourceNotify)(nil),
		(*SCMessage_ScResourceList)(nil),
		(*SCMessage_ScErrResponse)(nil),
		(*SCMessage_ScStatisticsList)(nil),
		(*SCMessage_ScLimitList)(nil),
		(*SCMessage_ScDrawReward)(nil),
		(*SCMessage_ScRankList)(nil),
		(*SCMessage_ScMailList)(nil),
		(*SCMessage_ScMailNotify)(nil),
		(*SCMessage_ScGetShop)(nil),
		(*SCMessage_ScTowerInfo)(nil),
		(*SCMessage_ScTowerFight)(nil),
		(*SCMessage_ScGetGuildlist)(nil),
		(*SCMessage_ScGetFriendlist)(nil),
		(*SCMessage_ScFriendRecommend)(nil),
		(*SCMessage_ScFriendSearch)(nil),
		(*SCMessage_ScBattleHeartBeat)(nil),
		(*SCMessage_ScEnterStage)(nil),
		(*SCMessage_ScBattleLogin)(nil),
		(*SCMessage_ScBattleReady)(nil),
		(*SCMessage_ScBattleGm)(nil),
		(*SCMessage_ScMove)(nil),
		(*SCMessage_ScAddUnit)(nil),
		(*SCMessage_ScRemoveUnit)(nil),
		(*SCMessage_ScSyncUnitInfo)(nil),
		(*SCMessage_ScQuickTakeRoom)(nil),
		(*SCMessage_ScCollectionResource)(nil),
		(*SCMessage_ScStateChange)(nil),
		(*SCMessage_ScAwardsGet)(nil),
		(*SCMessage_ScMainUnit)(nil),
		(*SCMessage_ScUnitAddItem)(nil),
		(*SCMessage_ScUnitSyncItem)(nil),
		(*SCMessage_ScCastSkill)(nil),
		(*SCMessage_ScSyncDamage)(nil),
		(*SCMessage_ScSyncGunInfo)(nil),
		(*SCMessage_ScShiftGun)(nil),
		(*SCMessage_ScStageRestart)(nil),
		(*SCMessage_ScStagePhaseTiming)(nil),
		(*SCMessage_ScStageMonsterComingTiming)(nil),
		(*SCMessage_ScAddBuff)(nil),
		(*SCMessage_ScDelBuff)(nil),
		(*SCMessage_ScAddMagicfield)(nil),
		(*SCMessage_ScDelMagicfield)(nil),
		(*SCMessage_ScUnitInterruptSkill)(nil),
		(*SCMessage_ScTips)(nil),
		(*SCMessage_ScSyncAllItems)(nil),
		(*SCMessage_ScGetExp)(nil),
		(*SCMessage_ScGetAbility)(nil),
		(*SCMessage_ScTaskList)(nil),
		(*SCMessage_ScSyncTasks)(nil),
		(*SCMessage_ScMonsterWaveComing)(nil),
		(*SCMessage_ScEnterScene)(nil),
		(*SCMessage_ScMonsterWakeup)(nil),
		(*SCMessage_ScCastBullet)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msg_types_sc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msg_types_sc_proto_goTypes,
		DependencyIndexes: file_msg_types_sc_proto_depIdxs,
		MessageInfos:      file_msg_types_sc_proto_msgTypes,
	}.Build()
	File_msg_types_sc_proto = out.File
	file_msg_types_sc_proto_rawDesc = nil
	file_msg_types_sc_proto_goTypes = nil
	file_msg_types_sc_proto_depIdxs = nil
}
